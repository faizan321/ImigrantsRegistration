// Generated by view binder compiler. Do not edit!
package com.hisdu.meas.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hisdu.meas.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SectionFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton backButtonCustom;

  @NonNull
  public final LinearLayout linearLayout3;

  @NonNull
  public final Toolbar mainToolbar;

  @NonNull
  public final RecyclerView rolesRecycler;

  @NonNull
  public final Button syncForm;

  @NonNull
  public final TextView toolbarTitle;

  private SectionFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageButton backButtonCustom, @NonNull LinearLayout linearLayout3,
      @NonNull Toolbar mainToolbar, @NonNull RecyclerView rolesRecycler, @NonNull Button syncForm,
      @NonNull TextView toolbarTitle) {
    this.rootView = rootView;
    this.backButtonCustom = backButtonCustom;
    this.linearLayout3 = linearLayout3;
    this.mainToolbar = mainToolbar;
    this.rolesRecycler = rolesRecycler;
    this.syncForm = syncForm;
    this.toolbarTitle = toolbarTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SectionFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SectionFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.section_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SectionFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_button_custom;
      ImageButton backButtonCustom = ViewBindings.findChildViewById(rootView, id);
      if (backButtonCustom == null) {
        break missingId;
      }

      id = R.id.linearLayout3;
      LinearLayout linearLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout3 == null) {
        break missingId;
      }

      id = R.id.main_toolbar;
      Toolbar mainToolbar = ViewBindings.findChildViewById(rootView, id);
      if (mainToolbar == null) {
        break missingId;
      }

      id = R.id.roles_recycler;
      RecyclerView rolesRecycler = ViewBindings.findChildViewById(rootView, id);
      if (rolesRecycler == null) {
        break missingId;
      }

      id = R.id.sync_form;
      Button syncForm = ViewBindings.findChildViewById(rootView, id);
      if (syncForm == null) {
        break missingId;
      }

      id = R.id.toolbar_title;
      TextView toolbarTitle = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTitle == null) {
        break missingId;
      }

      return new SectionFragmentBinding((ConstraintLayout) rootView, backButtonCustom,
          linearLayout3, mainToolbar, rolesRecycler, syncForm, toolbarTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
