// Generated by view binder compiler. Do not edit!
package com.hisdu.meas.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hisdu.meas.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FacilityItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView adults;

  @NonNull
  public final TextView familyHeadName;

  @NonNull
  public final TextView familyHeaderCnic;

  @NonNull
  public final TextView kids;

  @NonNull
  public final TextView routOfMigration;

  private FacilityItemBinding(@NonNull LinearLayout rootView, @NonNull TextView adults,
      @NonNull TextView familyHeadName, @NonNull TextView familyHeaderCnic, @NonNull TextView kids,
      @NonNull TextView routOfMigration) {
    this.rootView = rootView;
    this.adults = adults;
    this.familyHeadName = familyHeadName;
    this.familyHeaderCnic = familyHeaderCnic;
    this.kids = kids;
    this.routOfMigration = routOfMigration;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FacilityItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FacilityItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.facility_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FacilityItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adults;
      TextView adults = ViewBindings.findChildViewById(rootView, id);
      if (adults == null) {
        break missingId;
      }

      id = R.id.family_head_name;
      TextView familyHeadName = ViewBindings.findChildViewById(rootView, id);
      if (familyHeadName == null) {
        break missingId;
      }

      id = R.id.family_header_cnic;
      TextView familyHeaderCnic = ViewBindings.findChildViewById(rootView, id);
      if (familyHeaderCnic == null) {
        break missingId;
      }

      id = R.id.kids;
      TextView kids = ViewBindings.findChildViewById(rootView, id);
      if (kids == null) {
        break missingId;
      }

      id = R.id.rout_of_migration;
      TextView routOfMigration = ViewBindings.findChildViewById(rootView, id);
      if (routOfMigration == null) {
        break missingId;
      }

      return new FacilityItemBinding((LinearLayout) rootView, adults, familyHeadName,
          familyHeaderCnic, kids, routOfMigration);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
